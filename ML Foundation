{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression From Scratch\n",
    "\n",
    "In this notebook, we will build a simple linear regression(Univariate) model from the ground up for a dataset with a linear relationship.\n",
    "\n",
    "## Dataset Description\n",
    "\n",
    "A simple dataset with the following values:\n",
    "\n",
    "```python\n",
    "x = np.array([30, 45, 32, 28, 27, 24])\n",
    "y = np.array([28, 44, 29, 25, 26, 22])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w: 1.0441176470588236 & b: -3.367647058823551\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=np.array([30,45,32,28,27,24])\n",
    "y=np.array([28,44,29,25,26,22])\n",
    "n=len(x)\n",
    "\n",
    "\n",
    "# findig parameter using Built-in  polyfit Function \n",
    "w, b = np.polyfit(x, y, 1)\n",
    "print(f\"w: {w} & b: {b}\")\n",
    "\n",
    "# Ploting \n",
    "plt.scatter(x, y, color='blue', label='Data points')\n",
    "plt.plot(x, w*x + b, color='red', label='Line of best fit')\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('Y')\n",
    "plt.title('Scatter Plot with Line of Best Fit')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def cost_value():\n",
    "#     dw=(1/n)*(sum((w*x+b-y)*x))\n",
    "#     db=(1/n)*(sum(w*x+b-y))\n",
    "#     return dw,db\n",
    "# b=0\n",
    "# w=0\n",
    "# r=0.001\n",
    "# n=len(x)\n",
    "# for i in range(140000):\n",
    "#     dw,db=cost_value()\n",
    "#     w=w-r*dw\n",
    "#     b=b-r*db\n",
    "# print(w,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Computing Cost\n",
    "\n",
    "In this section, we will compute the cost function for our linear regression model. The cost function helps us measure how well our model's predictions match the actual data. It is defined as the mean squared error between the predicted values and the actual values.\n",
    "\n",
    "$f_{\\mathbf{w},\\mathbf{b}} $ is the predicted values of $\\mathbf{x^{(i)}}$  are obtained using the initialized random parameters $ \\mathbf{w} $ and $ \\mathbf{b} $ such that:\n",
    "\n",
    "$$f_{\\mathbf{w},\\mathbf{b}}(x^{(i)}) = \\mathbf{w} x^{(i)} + \\mathbf{b} $$ \n",
    "\n",
    "then the equation for the cost with actual value $\\mathbf{y^{(i)}}$ is then given by:\n",
    "\n",
    "$$J(\\mathbf{w},\\mathbf{b}) = \\frac{1}{2n} \\sum\\limits_{i = 0}^{n-1} \\left( f_{\\mathbf{w},\\mathbf{b}}(x^{(i)}) - y^{(i)} \\right)^2 $$ \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "445.5"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def compute_cost(x, y, w, b):  \n",
    "    cost_sum = 0 \n",
    "    for i in range(n): \n",
    "        f_wb = w * x[i] + b   \n",
    "        cost = (f_wb - y[i]) ** 2  \n",
    "        cost_sum = cost_sum + cost  \n",
    "    total_cost = (1 / (2 * n)) * cost_sum  \n",
    "\n",
    "    return total_cost\n",
    "intial_cost=compute_cost(x,y,0,0)\n",
    "intial_cost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Computing Gradients\n",
    "\n",
    "In this section, we will define a function to compute the gradients of the cost function with respect to the parameters  $\\mathbf{w} $ and $\\mathbf{b} $. These gradients will be used to update the parameters during the training process.\n",
    "\n",
    "The function `compute_gradient` calculates the partial derivatives of the cost function with respect to $\\mathbf{w} $ and $\\mathbf{b} $ and \n",
    "the gradient is defined as:\n",
    "$$\n",
    "\\begin{align}\n",
    "\\frac{\\partial J(w,b)}{\\partial w}  &= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})x^{(i)} \\\\\n",
    "  \\frac{\\partial J(w,b)}{\\partial b}  &= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)}) \\\\\n",
    "\\end{align}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_gradient(x, y, w, b): \n",
    "    # Number of training examples   \n",
    "    dj_dw = 0\n",
    "    dj_db = 0\n",
    "    \n",
    "    for i in range(n):  \n",
    "        f_wb = w * x[i] + b \n",
    "        dj_dw_i = (f_wb - y[i]) * x[i] \n",
    "        dj_db_i = f_wb - y[i] \n",
    "        dj_db += dj_db_i\n",
    "        dj_dw += dj_dw_i \n",
    "    dj_dw = dj_dw / n \n",
    "    dj_db = dj_db / n \n",
    "    return dj_dw, dj_db"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gradient Descent\n",
    "\n",
    "In this section, we will implement the gradient descent algorithm to optimize the parameters $\\mathbf{w} $ and $\\mathbf{b} $ of our linear regression model. Gradient descent iteratively updates the parameters to minimize the cost function.\n",
    "`gradient_descent` was described as:\n",
    "\n",
    "$$\\begin{align*} \\text{repeat}&\\text{ until convergence:} \\; \\lbrace \\newline\n",
    "\\;  w &= w -  \\alpha \\frac{\\partial J(w,b)}{\\partial w}  \\; \\newline \n",
    " b &= b -  \\alpha \\frac{\\partial J(w,b)}{\\partial b}  \\newline \\rbrace\n",
    "\\end{align*}$$\n",
    "where, parameters $w$, $b$ are updated simultaneously.  \n",
    "\n",
    "The function `gradient_descent` performs the optimization process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradient_descent(x, y, w_in, b_in, alpha, num_iters, cost_function, gradient_function): \n",
    "\n",
    "    cost_hist = []\n",
    "    parameter_hist = []\n",
    "    b = b_in\n",
    "    w = w_in\n",
    "    \n",
    "    for i in range(num_iters):\n",
    "        dj_dw, dj_db = gradient_function(x, y, w , b)\n",
    "        \n",
    "        cost_hist.append( cost_function(x, y, w , b))\n",
    "        parameter_hist.append([w,b])\n",
    "\n",
    "        b = b - alpha * dj_db                            \n",
    "        w = w - alpha * dj_dw                            \n",
    " \n",
    "    return w, b, cost_hist, parameter_hist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running Gradient Descent\n",
    "\n",
    "In this section, we will run the gradient descent algorithm to optimize the parameters $\\mathbf{w} $ and $\\mathbf{b} $ for our linear regression model. We  initialized the parameters, set the learning rate and the number of iterations, and then executed the gradient descent function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(w,b) found by gradient descent: (1.0439256732456403,-3.3614154134206116)\n"
     ]
    }
   ],
   "source": [
    "w_init = 0\n",
    "b_init = 0\n",
    "iterations = 140000\n",
    "tmp_alpha = 0.001\n",
    "\n",
    "w_final, b_final, cost_hist, para_hist = gradient_descent(x ,y, w_init, b_init, tmp_alpha, \n",
    "                                                    iterations, compute_cost, compute_gradient)\n",
    "print(f\"(w,b) found by gradient descent: ({w_final:},{b_final:})\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting Cost vs. Iteration\n",
    "\n",
    "In this section, we will visualize the changes in the cost function over the iterations of the gradient descent algorithm. This visualization helps us understand the convergence behavior of the algorithm.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot cost versus iteration  \n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, constrained_layout=True, figsize=(12,4))\n",
    "ax1.plot(cost_hist[:5])\n",
    "ax2.plot(1000 + np.arange(len(cost_hist[1000:])),cost_hist[1000:])\n",
    "ax1.set_title(\"Cost vs. iteration(start)\");\n",
    "ax2.set_title(\"Cost vs. iteration (end)\")\n",
    "ax1.set_ylabel('Cost')            ; \n",
    "ax2.set_ylabel('Cost') \n",
    "ax1.set_xlabel('iteration step')  ; \n",
    "ax2.set_xlabel('iteration step') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Making Predictions\n",
    "\n",
    "In this section, we will predict the outputs based on the obtained parameter values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.09842228833525"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict(**x):\n",
    "    output=w_final*x+b_final\n",
    "    return output\n",
    "prediction(35)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Acknowledgments\n",
    "\n",
    "For better representation and understanding, some of the markup equations and lines of code in this notebook were adapted from the Coursera Supervised Machine Learning course notebooks.I am truly grateful to them for their resources.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

